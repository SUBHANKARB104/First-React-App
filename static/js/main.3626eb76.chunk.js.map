{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","data-bs-theme","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","role","placeholder","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","style","color","heading","backgroundColor","value","rows","onChange","event","target","handleUpClick","newText","toUpperCase","handleLowClick","toLowerCase","handleClear","handleDownloadText","bl","Blob","u","URL","createObjectURL","b","document","href","download","click","handleCopy","getElementById","select","navigator","clipboard","writeText","trim","split","filter","word","length","replace","About","myStyle","setmyStyle","btntext","setBtnText","data-bs-parent","toggle","App","setMode","Fragment","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.3626eb76.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg bg-body-tertiary\" data-bs-theme= {props.mode}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\r\n      </form>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input mx-1\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark'? 'Disable Dark Mode':'Enable Dark Mode'}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n     about: PropTypes.string.isRequired}\r\n","// import { configure } from '@testing-library/react';\r\nimport React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase Was Clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLowClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleDownloadText = () => {\r\n        const bl = new Blob([text], { type: 'text/plain' });\r\n        const u = URL.createObjectURL(bl);\r\n        const b = document.createElement('a'); // Create an anchor element and store it in the 'b' variable\r\n        b.href = u; // Assign the generated file URL to the 'href' attribute of the anchor element\r\n        b.download = 'Text.txt'; // Set the filename for the downloaded file\r\n        b.click(); // Programmatically trigger a click event to initiate the download\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n    \r\n      \r\n    const handleClear = ()=>{\r\n        setText('');\r\n    }\r\n    const handleOnChnage = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState(\" \");\r\n    return (\r\n        <div>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    {/* <label htmlFor=\"myBox\" className=\"form-label\">{props.heading}</label> */}\r\n                    <textarea className=\"form-control\" style={{backgroundColor:props.mode==='dark'?'#042743':'white', color:props.mode==='dark'?'white':'black'}} value= {text} id=\"myBox\" rows=\"8\" onChange={handleOnChnage} ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert To Lowercase</button>                \r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClear}>Clear</button>                \r\n                <button className=\"btn btn-primary mx-1\" onClick={handleDownloadText}>Download</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>\r\n                {text.trim().split(/\\s+/).filter(word => word !== \"\").length} Words and {text.replace(/\\s/g, \"\").length} Characters\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// import { useState } from \"react\"\r\n\r\nimport React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const[myStyle, setmyStyle]= useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n\r\n    const [btntext,setBtnText]= useState('Enable Dark Mode')\r\n\r\n    const toggle = () => {\r\n        if(myStyle.color ==='white'){\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText('Enable Dark Mode')\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText('Enable Light Mode')\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container my-3\" style={myStyle}>\r\n        <h1 className='my-3'> About Us</h1>\r\n    <div className=\"accordion\" id=\"accordionExample\" >\r\n        <div className=\"accordion-item my-2\">\r\n            <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\"    data-bs-target=\"#collapseOne\" aria-expanded=\"true\"aria-controls=\"collapseOne\" style={myStyle}>\r\n                Accordion Item #1\r\n                </button>\r\n            </h2>\r\n        <div\r\n        id=\"collapseOne\"\r\n        className=\"accordion-collapse collapse show\"\r\n        data-bs-parent=\"#accordionExample\"\r\n      >\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n          <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"accordion-item my-2\">\r\n      <h2 className=\"accordion-header\">\r\n        <button\r\n          className=\"accordion-button collapsed\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#collapseTwo\"\r\n          aria-expanded=\"false\"\r\n          aria-controls=\"collapseTwo\" style={myStyle}\r\n        >\r\n          Accordion Item #2\r\n        </button>\r\n      </h2>\r\n      <div\r\n        id=\"collapseTwo\"\r\n        className=\"accordion-collapse collapse\"\r\n        data-bs-parent=\"#accordionExample\"\r\n      >\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n          <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"accordion-item my-2\">\r\n      <h2 className=\"accordion-header\">\r\n        <button\r\n          className=\"accordion-button collapsed\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#collapseThree\"\r\n          aria-expanded=\"false\"\r\n          aria-controls=\"collapseThree\" style={myStyle}\r\n        >\r\n          Accordion Item #3\r\n        </button>\r\n      </h2>\r\n      <div\r\n        id=\"collapseThree\"\r\n        className=\"accordion-collapse collapse\"\r\n        data-bs-parent=\"#accordionExample\"\r\n      >\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n          <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div className=\"container\">\r\n    <button onClick={toggle} type=\"button\" className=\"btn btn-primary my-3\" style={myStyle}>{btntext}</button>\r\n  </div>\r\n</div>\r\n\r\n  )\r\n}\r\n","import React, { useState } from 'react'; // Import React\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import Alert from './components/Alert';\nimport About from './components/About';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nfunction App() {\n    const [mode, setMode] = useState('light'); // Move this line up for better readability\n\n    const toggleMode = () => {\n      if (mode === 'light') {\n        setMode('dark');\n        document.body.style.backgroundColor = '#042743';\n      } else {\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n      }\n    };\n\n    return (\n      <>\n        <Router>\n          <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n          {/* <Alert alert=\"This Is Alert\"/> */}\n          <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter The Text To Analyze Below\" mode={mode} />} />\n          </Routes>\n        </Router>\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}